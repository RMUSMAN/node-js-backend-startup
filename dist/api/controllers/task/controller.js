"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Controller = void 0;

var _task = _interopRequireDefault(require("../../services/task.service"));

var _helpers = require("../../../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Controller {
  async createTask(req, res) {
    try {
      const data = (0, _helpers.decodeToken)(req);
      req.body.creator = data.id;

      const taskObject = _task.default.taskObject(req);

      const task = await _task.default.saveTask(taskObject);
      res.status(201).json({
        message: 'Task created successfully',
        data: task
      });
    } catch (error) {
      res.status(400).json({
        message: error.message
      });
    }
  }

  async getTasks(req, res) {
    try {
      const data = (0, _helpers.decodeToken)(req);
      const tasks = await _task.default.getAllTasks(data.id);
      res.status(201).json({
        data: tasks
      });
    } catch (error) {
      console.log(error.message);
      res.status(500).json({
        message: error.message
      });
    }
  }

  async getTask(req, res) {
    try {
      const task = await _task.default.getTask(req.params.id);
      res.status(201).json({
        data: task
      });
    } catch (error) {
      res.status(400).json({
        message: error.message
      });
    }
  }

  async updateTask(req, res) {
    try {
      const task = await _task.default.updateTask(req.params.id, req.body);
      return res.status(201).json({
        data: task
      });
    } catch (error) {
      return res.status(400).json({
        message: error.message
      });
    }
  }

}

exports.Controller = Controller;

var _default = new Controller();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NlcnZlci9hcGkvY29udHJvbGxlcnMvdGFzay9jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbIkNvbnRyb2xsZXIiLCJjcmVhdGVUYXNrIiwicmVxIiwicmVzIiwiZGF0YSIsImJvZHkiLCJjcmVhdG9yIiwiaWQiLCJ0YXNrT2JqZWN0IiwiVGFza1NlcnZpY2UiLCJ0YXNrIiwic2F2ZVRhc2siLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsImVycm9yIiwiZ2V0VGFza3MiLCJ0YXNrcyIsImdldEFsbFRhc2tzIiwiY29uc29sZSIsImxvZyIsImdldFRhc2siLCJwYXJhbXMiLCJ1cGRhdGVUYXNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFDTyxNQUFNQSxVQUFOLENBQWlCO0FBQ04sUUFBVkMsVUFBVSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBVztBQUN6QixRQUFJO0FBQ0YsWUFBTUMsSUFBSSxHQUFHLDBCQUFZRixHQUFaLENBQWI7QUFDQUEsTUFBQUEsR0FBRyxDQUFDRyxJQUFKLENBQVNDLE9BQVQsR0FBbUJGLElBQUksQ0FBQ0csRUFBeEI7O0FBQ0EsWUFBTUMsVUFBVSxHQUFHQyxjQUFZRCxVQUFaLENBQXVCTixHQUF2QixDQUFuQjs7QUFDQSxZQUFNUSxJQUFJLEdBQUcsTUFBTUQsY0FBWUUsUUFBWixDQUFxQkgsVUFBckIsQ0FBbkI7QUFDQUwsTUFBQUEsR0FBRyxDQUNBUyxNQURILENBQ1UsR0FEVixFQUVHQyxJQUZILENBRVE7QUFBRUMsUUFBQUEsT0FBTyxFQUFFLDJCQUFYO0FBQXdDVixRQUFBQSxJQUFJLEVBQUVNO0FBQTlDLE9BRlI7QUFHRCxLQVJELENBUUUsT0FBT0ssS0FBUCxFQUFjO0FBQ2RaLE1BQUFBLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVDLFFBQUFBLE9BQU8sRUFBRUMsS0FBSyxDQUFDRDtBQUFqQixPQUFyQjtBQUNEO0FBQ0Y7O0FBQ2EsUUFBUkUsUUFBUSxDQUFDZCxHQUFELEVBQU1DLEdBQU4sRUFBVztBQUN2QixRQUFJO0FBQ0YsWUFBTUMsSUFBSSxHQUFHLDBCQUFZRixHQUFaLENBQWI7QUFDQSxZQUFNZSxLQUFLLEdBQUcsTUFBTVIsY0FBWVMsV0FBWixDQUF3QmQsSUFBSSxDQUFDRyxFQUE3QixDQUFwQjtBQUNBSixNQUFBQSxHQUFHLENBQUNTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUFFVCxRQUFBQSxJQUFJLEVBQUVhO0FBQVIsT0FBckI7QUFDRCxLQUpELENBSUUsT0FBT0YsS0FBUCxFQUFjO0FBQ2RJLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTCxLQUFLLENBQUNELE9BQWxCO0FBQ0FYLE1BQUFBLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVDLFFBQUFBLE9BQU8sRUFBRUMsS0FBSyxDQUFDRDtBQUFqQixPQUFyQjtBQUNEO0FBQ0Y7O0FBQ1ksUUFBUE8sT0FBTyxDQUFDbkIsR0FBRCxFQUFNQyxHQUFOLEVBQVc7QUFDdEIsUUFBSTtBQUNGLFlBQU1PLElBQUksR0FBRyxNQUFNRCxjQUFZWSxPQUFaLENBQW9CbkIsR0FBRyxDQUFDb0IsTUFBSixDQUFXZixFQUEvQixDQUFuQjtBQUNBSixNQUFBQSxHQUFHLENBQUNTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUFFVCxRQUFBQSxJQUFJLEVBQUVNO0FBQVIsT0FBckI7QUFDRCxLQUhELENBR0UsT0FBT0ssS0FBUCxFQUFjO0FBQ2RaLE1BQUFBLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVDLFFBQUFBLE9BQU8sRUFBRUMsS0FBSyxDQUFDRDtBQUFqQixPQUFyQjtBQUNEO0FBQ0Y7O0FBQ2UsUUFBVlMsVUFBVSxDQUFDckIsR0FBRCxFQUFNQyxHQUFOLEVBQVc7QUFDekIsUUFBSTtBQUNGLFlBQU1PLElBQUksR0FBRyxNQUFNRCxjQUFZYyxVQUFaLENBQXVCckIsR0FBRyxDQUFDb0IsTUFBSixDQUFXZixFQUFsQyxFQUFzQ0wsR0FBRyxDQUFDRyxJQUExQyxDQUFuQjtBQUNBLGFBQU9GLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVULFFBQUFBLElBQUksRUFBRU07QUFBUixPQUFyQixDQUFQO0FBQ0QsS0FIRCxDQUdFLE9BQU9LLEtBQVAsRUFBYztBQUNkLGFBQU9aLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVDLFFBQUFBLE9BQU8sRUFBRUMsS0FBSyxDQUFDRDtBQUFqQixPQUFyQixDQUFQO0FBQ0Q7QUFDRjs7QUF2Q3FCOzs7O2VBeUNULElBQUlkLFVBQUosRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUYXNrU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy90YXNrLnNlcnZpY2UnO1xuaW1wb3J0IHsgZGVjb2RlVG9rZW4gfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzJztcbmV4cG9ydCBjbGFzcyBDb250cm9sbGVyIHtcbiAgYXN5bmMgY3JlYXRlVGFzayhyZXEsIHJlcykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0gZGVjb2RlVG9rZW4ocmVxKTtcbiAgICAgIHJlcS5ib2R5LmNyZWF0b3IgPSBkYXRhLmlkO1xuICAgICAgY29uc3QgdGFza09iamVjdCA9IFRhc2tTZXJ2aWNlLnRhc2tPYmplY3QocmVxKTtcbiAgICAgIGNvbnN0IHRhc2sgPSBhd2FpdCBUYXNrU2VydmljZS5zYXZlVGFzayh0YXNrT2JqZWN0KTtcbiAgICAgIHJlc1xuICAgICAgICAuc3RhdHVzKDIwMSlcbiAgICAgICAgLmpzb24oeyBtZXNzYWdlOiAnVGFzayBjcmVhdGVkIHN1Y2Nlc3NmdWxseScsIGRhdGE6IHRhc2sgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZ2V0VGFza3MocmVxLCByZXMpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YSA9IGRlY29kZVRva2VuKHJlcSk7XG4gICAgICBjb25zdCB0YXNrcyA9IGF3YWl0IFRhc2tTZXJ2aWNlLmdldEFsbFRhc2tzKGRhdGEuaWQpO1xuICAgICAgcmVzLnN0YXR1cygyMDEpLmpzb24oeyBkYXRhOiB0YXNrcyB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSk7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGdldFRhc2socmVxLCByZXMpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdGFzayA9IGF3YWl0IFRhc2tTZXJ2aWNlLmdldFRhc2socmVxLnBhcmFtcy5pZCk7XG4gICAgICByZXMuc3RhdHVzKDIwMSkuanNvbih7IGRhdGE6IHRhc2sgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgdXBkYXRlVGFzayhyZXEsIHJlcykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB0YXNrID0gYXdhaXQgVGFza1NlcnZpY2UudXBkYXRlVGFzayhyZXEucGFyYW1zLmlkLCByZXEuYm9keSk7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oeyBkYXRhOiB0YXNrIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH0pO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgbmV3IENvbnRyb2xsZXIoKTtcbiJdfQ==