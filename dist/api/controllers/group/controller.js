"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Controller = void 0;

var _group = _interopRequireDefault(require("../../services/group.service"));

var _helpers = require("../../../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Controller {
  async createGroup(req, res) {
    try {
      const data = (0, _helpers.decodeToken)(req);
      req.body.creator = data.id;

      const groupObject = _group.default.groupObject(req);

      const group = await _group.default.saveGroup(groupObject);
      res.status(201).json({
        message: 'Group created successfully',
        data: group
      });
    } catch (error) {
      res.status(400).json({
        message: error.message
      });
    }
  }

  async getGroups(req, res) {
    try {
      const data = (0, _helpers.decodeToken)(req);
      const groups = await _group.default.getAllGroups(data.id);
      res.status(201).json({
        data: groups
      });
    } catch (error) {
      console.log(error.message);
      res.status(500).json({
        message: error.message
      });
    }
  }

  async getGroup(req, res) {
    try {
      const group = await _group.default.getGroup(req.params.id);
      res.status(201).json({
        data: group
      });
    } catch (error) {
      res.status(400).json({
        message: error.message
      });
    }
  }

  async updateGroup(req, res) {
    try {
      const group = await _group.default.updateGroup(req.params.id, req.body);
      return res.status(201).json({
        data: group
      });
    } catch (error) {
      return res.status(400).json({
        message: error.message
      });
    }
  }

}

exports.Controller = Controller;

var _default = new Controller();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NlcnZlci9hcGkvY29udHJvbGxlcnMvZ3JvdXAvY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJDb250cm9sbGVyIiwiY3JlYXRlR3JvdXAiLCJyZXEiLCJyZXMiLCJkYXRhIiwiYm9keSIsImNyZWF0b3IiLCJpZCIsImdyb3VwT2JqZWN0IiwiR3JvdXBTZXJ2aWNlIiwiZ3JvdXAiLCJzYXZlR3JvdXAiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsImVycm9yIiwiZ2V0R3JvdXBzIiwiZ3JvdXBzIiwiZ2V0QWxsR3JvdXBzIiwiY29uc29sZSIsImxvZyIsImdldEdyb3VwIiwicGFyYW1zIiwidXBkYXRlR3JvdXAiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUNPLE1BQU1BLFVBQU4sQ0FBaUI7QUFDTCxRQUFYQyxXQUFXLENBQUNDLEdBQUQsRUFBTUMsR0FBTixFQUFXO0FBQzFCLFFBQUk7QUFDRixZQUFNQyxJQUFJLEdBQUcsMEJBQVlGLEdBQVosQ0FBYjtBQUNBQSxNQUFBQSxHQUFHLENBQUNHLElBQUosQ0FBU0MsT0FBVCxHQUFtQkYsSUFBSSxDQUFDRyxFQUF4Qjs7QUFDQSxZQUFNQyxXQUFXLEdBQUdDLGVBQWFELFdBQWIsQ0FBeUJOLEdBQXpCLENBQXBCOztBQUNBLFlBQU1RLEtBQUssR0FBRyxNQUFNRCxlQUFhRSxTQUFiLENBQXVCSCxXQUF2QixDQUFwQjtBQUNBTCxNQUFBQSxHQUFHLENBQ0FTLE1BREgsQ0FDVSxHQURWLEVBRUdDLElBRkgsQ0FFUTtBQUFFQyxRQUFBQSxPQUFPLEVBQUUsNEJBQVg7QUFBeUNWLFFBQUFBLElBQUksRUFBRU07QUFBL0MsT0FGUjtBQUdELEtBUkQsQ0FRRSxPQUFPSyxLQUFQLEVBQWM7QUFDZFosTUFBQUEsR0FBRyxDQUFDUyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFBRUMsUUFBQUEsT0FBTyxFQUFFQyxLQUFLLENBQUNEO0FBQWpCLE9BQXJCO0FBQ0Q7QUFDRjs7QUFDYyxRQUFURSxTQUFTLENBQUNkLEdBQUQsRUFBTUMsR0FBTixFQUFXO0FBQ3hCLFFBQUk7QUFDRixZQUFNQyxJQUFJLEdBQUcsMEJBQVlGLEdBQVosQ0FBYjtBQUNBLFlBQU1lLE1BQU0sR0FBRyxNQUFNUixlQUFhUyxZQUFiLENBQTBCZCxJQUFJLENBQUNHLEVBQS9CLENBQXJCO0FBQ0FKLE1BQUFBLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVULFFBQUFBLElBQUksRUFBRWE7QUFBUixPQUFyQjtBQUNELEtBSkQsQ0FJRSxPQUFPRixLQUFQLEVBQWM7QUFDZEksTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlMLEtBQUssQ0FBQ0QsT0FBbEI7QUFDQVgsTUFBQUEsR0FBRyxDQUFDUyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFBRUMsUUFBQUEsT0FBTyxFQUFFQyxLQUFLLENBQUNEO0FBQWpCLE9BQXJCO0FBQ0Q7QUFDRjs7QUFDYSxRQUFSTyxRQUFRLENBQUNuQixHQUFELEVBQU1DLEdBQU4sRUFBVztBQUN2QixRQUFJO0FBQ0YsWUFBTU8sS0FBSyxHQUFHLE1BQU1ELGVBQWFZLFFBQWIsQ0FBc0JuQixHQUFHLENBQUNvQixNQUFKLENBQVdmLEVBQWpDLENBQXBCO0FBQ0FKLE1BQUFBLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVULFFBQUFBLElBQUksRUFBRU07QUFBUixPQUFyQjtBQUNELEtBSEQsQ0FHRSxPQUFPSyxLQUFQLEVBQWM7QUFDZFosTUFBQUEsR0FBRyxDQUFDUyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFBRUMsUUFBQUEsT0FBTyxFQUFFQyxLQUFLLENBQUNEO0FBQWpCLE9BQXJCO0FBQ0Q7QUFDRjs7QUFDZ0IsUUFBWFMsV0FBVyxDQUFDckIsR0FBRCxFQUFNQyxHQUFOLEVBQVc7QUFDMUIsUUFBSTtBQUNGLFlBQU1PLEtBQUssR0FBRyxNQUFNRCxlQUFhYyxXQUFiLENBQXlCckIsR0FBRyxDQUFDb0IsTUFBSixDQUFXZixFQUFwQyxFQUF3Q0wsR0FBRyxDQUFDRyxJQUE1QyxDQUFwQjtBQUNBLGFBQU9GLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVULFFBQUFBLElBQUksRUFBRU07QUFBUixPQUFyQixDQUFQO0FBQ0QsS0FIRCxDQUdFLE9BQU9LLEtBQVAsRUFBYztBQUNkLGFBQU9aLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVDLFFBQUFBLE9BQU8sRUFBRUMsS0FBSyxDQUFDRDtBQUFqQixPQUFyQixDQUFQO0FBQ0Q7QUFDRjs7QUF2Q3FCOzs7O2VBeUNULElBQUlkLFVBQUosRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHcm91cFNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZ3JvdXAuc2VydmljZSc7XG5pbXBvcnQgeyBkZWNvZGVUb2tlbiB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMnO1xuZXhwb3J0IGNsYXNzIENvbnRyb2xsZXIge1xuICBhc3luYyBjcmVhdGVHcm91cChyZXEsIHJlcykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0gZGVjb2RlVG9rZW4ocmVxKTtcbiAgICAgIHJlcS5ib2R5LmNyZWF0b3IgPSBkYXRhLmlkO1xuICAgICAgY29uc3QgZ3JvdXBPYmplY3QgPSBHcm91cFNlcnZpY2UuZ3JvdXBPYmplY3QocmVxKTtcbiAgICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgR3JvdXBTZXJ2aWNlLnNhdmVHcm91cChncm91cE9iamVjdCk7XG4gICAgICByZXNcbiAgICAgICAgLnN0YXR1cygyMDEpXG4gICAgICAgIC5qc29uKHsgbWVzc2FnZTogJ0dyb3VwIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5JywgZGF0YTogZ3JvdXAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZ2V0R3JvdXBzKHJlcSwgcmVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBkZWNvZGVUb2tlbihyZXEpO1xuICAgICAgY29uc3QgZ3JvdXBzID0gYXdhaXQgR3JvdXBTZXJ2aWNlLmdldEFsbEdyb3VwcyhkYXRhLmlkKTtcbiAgICAgIHJlcy5zdGF0dXMoMjAxKS5qc29uKHsgZGF0YTogZ3JvdXBzIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKTtcbiAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZ2V0R3JvdXAocmVxLCByZXMpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZ3JvdXAgPSBhd2FpdCBHcm91cFNlcnZpY2UuZ2V0R3JvdXAocmVxLnBhcmFtcy5pZCk7XG4gICAgICByZXMuc3RhdHVzKDIwMSkuanNvbih7IGRhdGE6IGdyb3VwIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIHVwZGF0ZUdyb3VwKHJlcSwgcmVzKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGdyb3VwID0gYXdhaXQgR3JvdXBTZXJ2aWNlLnVwZGF0ZUdyb3VwKHJlcS5wYXJhbXMuaWQsIHJlcS5ib2R5KTtcbiAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih7IGRhdGE6IGdyb3VwIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH0pO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgbmV3IENvbnRyb2xsZXIoKTtcbiJdfQ==