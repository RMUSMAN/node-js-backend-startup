"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Controller = void 0;

var _user = _interopRequireDefault(require("../../services/user.service"));

var _helpers = require("../../../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var randomString = require('randomstring');

class Controller {
  async getUsers(req, res) {
    try {
      const data = (0, _helpers.decodeToken)(req);
      const users = await _user.default.getAllUsers(data.id);
      res.status(200).json({
        data: users
      });
    } catch (error) {
      res.status(500).json({
        message: error.message
      });
    }
  }

  async getUser(req, res) {
    try {
      const user = _user.default.userObject(req.params.id);

      res.status(200).json({
        data: user
      });
    } catch (error) {
      res.status(500).json({
        message: error.message
      });
    }
  }

  async createUser(req, res) {
    try {
      const data = (0, _helpers.decodeToken)(req);
      const user = await _user.default.getUserByEmail(req.body.email);

      if (user) {
        if (user.email === data.email) {
          return res.status(400).json({
            message: 'You can not invite yourself'
          });
        }

        return res.status(400).json({
          message: 'Already invited'
        });
      }

      req.body.password = randomString.generate();
      req.body.creator = data.id;
      req.body.inviteStatus = 'pending';

      const obj = _user.default.userObject(req);

      const token = (0, _helpers.generateJwt)(obj, req.body.password);
      const link = (0, _helpers.generateInviteLink)(token);
      const savedUser = await _user.default.registerUser(obj);
      await _helpers.EmailHelpers.sendInviteEmail(savedUser, link, req, res);
      delete savedUser['password'];
      res.status(200).json({
        data: savedUser,
        message: `Invite is sent to ${savedUser.firstName} ${savedUser.lastName}`
      });
    } catch (error) {
      res.status(500).json({
        message: error.message
      });
    }
  }

  async setupAccount(req, res) {
    const {
      token,
      password
    } = req.body;

    try {
      const data = (0, _helpers.decodeInviteToken)(token);
      const user = await _user.default.getUserById(data.id);

      if (!user || !user.comparePassword(data.password)) {
        return res.status(401).json({
          message: 'Sorry. Your given link is not valid or expired, or already verified'
        });
      }

      user.password = password;
      user.isVerified = true;
      user.inviteStatus = 'accepted';
      await _user.default.registerUser(user);
      res.status(201).json({
        success: true,
        message: 'Password reset successfully, Sign in to continue'
      });
    } catch (error) {
      res.status(500).json({
        message: error.message
      });
    }
  }

  async changePassword(req, res) {
    const {
      password,
      newPassword
    } = req.body;

    try {
      const data = (0, _helpers.decodeToken)(req);
      const user = await _user.default.getUserById(data.id);

      if (!user) {
        return res.status(400).json({
          message: 'no user found'
        });
      }

      if (!user.comparePassword(password)) {
        return res.status(400).json({
          message: 'Your given old password is incorrect'
        });
      }

      user.password = newPassword;
      await _user.default.registerUser(user);
      res.status(201).json({
        success: true,
        message: 'Password is changed successfully'
      });
    } catch (error) {
      res.status(500).json({
        message: error.message
      });
    }
  }

  async updateUser(req, res) {
    const id = req.params.id;

    try {
      const updated = await _user.default.updateUser(id, req.body);
      res.status(201).json({
        success: true,
        data: updated
      });
    } catch (error) {
      res.status(500).send(error);
    }
  }

  async updateProfile(req, res) {
    try {
      const data = (0, _helpers.decodeToken)(req);
      const updated = await _user.default.updateUser(data.id, req.body);
      res.status(201).json({
        success: true,
        data: updated
      });
    } catch (error) {
      res.status(500).send(error);
    }
  } // async checkRole(data, req, res) {
  //   const user = await userService.getUserByEmail(req.body.email);
  //   if (user.email === data.email) {
  //     return res.status(400).json({ message: 'You can not invite yourself' });
  //   }else if(user?.)
  // }


}

exports.Controller = Controller;

var _default = new Controller();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,