"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Controller = void 0;

var _site = _interopRequireDefault(require("../../services/site.service"));

var _helpers = require("../../../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Controller {
  async createSite(req, res) {
    try {
      const data = (0, _helpers.decodeToken)(req);
      req.body.creator = data.id;

      const siteObject = _site.default.siteObject(req);

      const site = await _site.default.saveSite(siteObject);
      res.status(201).json({
        message: 'Site created successfully',
        data: site
      });
    } catch (error) {
      res.status(400).json({
        message: error.message
      });
    }
  }

  async getSites(req, res) {
    try {
      const data = (0, _helpers.decodeToken)(req);
      const sites = await _site.default.getAllSites(data.id);
      res.status(201).json({
        data: sites
      });
    } catch (error) {
      console.log(error.message);
      res.status(500).json({
        message: error.message
      });
    }
  }

  async getSite(req, res) {
    try {
      const site = await _site.default.getSite(req.params.id);
      res.status(201).json({
        data: site
      });
    } catch (error) {
      res.status(400).json({
        message: error.message
      });
    }
  }

  async updateSite(req, res) {
    try {
      const site = await _site.default.updateSite(req.params.id, req.body);
      return res.status(201).json({
        data: site
      });
    } catch (error) {
      return res.status(400).json({
        message: error.message
      });
    }
  }

}

exports.Controller = Controller;

var _default = new Controller();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NlcnZlci9hcGkvY29udHJvbGxlcnMvc2l0ZS9jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbIkNvbnRyb2xsZXIiLCJjcmVhdGVTaXRlIiwicmVxIiwicmVzIiwiZGF0YSIsImJvZHkiLCJjcmVhdG9yIiwiaWQiLCJzaXRlT2JqZWN0IiwiU2l0ZVNlcnZpY2UiLCJzaXRlIiwic2F2ZVNpdGUiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsImVycm9yIiwiZ2V0U2l0ZXMiLCJzaXRlcyIsImdldEFsbFNpdGVzIiwiY29uc29sZSIsImxvZyIsImdldFNpdGUiLCJwYXJhbXMiLCJ1cGRhdGVTaXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFDTyxNQUFNQSxVQUFOLENBQWlCO0FBQ04sUUFBVkMsVUFBVSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBVztBQUN6QixRQUFJO0FBQ0YsWUFBTUMsSUFBSSxHQUFHLDBCQUFZRixHQUFaLENBQWI7QUFDQUEsTUFBQUEsR0FBRyxDQUFDRyxJQUFKLENBQVNDLE9BQVQsR0FBbUJGLElBQUksQ0FBQ0csRUFBeEI7O0FBQ0EsWUFBTUMsVUFBVSxHQUFHQyxjQUFZRCxVQUFaLENBQXVCTixHQUF2QixDQUFuQjs7QUFDQSxZQUFNUSxJQUFJLEdBQUcsTUFBTUQsY0FBWUUsUUFBWixDQUFxQkgsVUFBckIsQ0FBbkI7QUFDQUwsTUFBQUEsR0FBRyxDQUNBUyxNQURILENBQ1UsR0FEVixFQUVHQyxJQUZILENBRVE7QUFBRUMsUUFBQUEsT0FBTyxFQUFFLDJCQUFYO0FBQXdDVixRQUFBQSxJQUFJLEVBQUVNO0FBQTlDLE9BRlI7QUFHRCxLQVJELENBUUUsT0FBT0ssS0FBUCxFQUFjO0FBQ2RaLE1BQUFBLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVDLFFBQUFBLE9BQU8sRUFBRUMsS0FBSyxDQUFDRDtBQUFqQixPQUFyQjtBQUNEO0FBQ0Y7O0FBQ2EsUUFBUkUsUUFBUSxDQUFDZCxHQUFELEVBQU1DLEdBQU4sRUFBVztBQUN2QixRQUFJO0FBQ0YsWUFBTUMsSUFBSSxHQUFHLDBCQUFZRixHQUFaLENBQWI7QUFDQSxZQUFNZSxLQUFLLEdBQUcsTUFBTVIsY0FBWVMsV0FBWixDQUF3QmQsSUFBSSxDQUFDRyxFQUE3QixDQUFwQjtBQUNBSixNQUFBQSxHQUFHLENBQUNTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUFFVCxRQUFBQSxJQUFJLEVBQUVhO0FBQVIsT0FBckI7QUFDRCxLQUpELENBSUUsT0FBT0YsS0FBUCxFQUFjO0FBQ2RJLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTCxLQUFLLENBQUNELE9BQWxCO0FBQ0FYLE1BQUFBLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVDLFFBQUFBLE9BQU8sRUFBRUMsS0FBSyxDQUFDRDtBQUFqQixPQUFyQjtBQUNEO0FBQ0Y7O0FBQ1ksUUFBUE8sT0FBTyxDQUFDbkIsR0FBRCxFQUFNQyxHQUFOLEVBQVc7QUFDdEIsUUFBSTtBQUNGLFlBQU1PLElBQUksR0FBRyxNQUFNRCxjQUFZWSxPQUFaLENBQW9CbkIsR0FBRyxDQUFDb0IsTUFBSixDQUFXZixFQUEvQixDQUFuQjtBQUNBSixNQUFBQSxHQUFHLENBQUNTLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUFFVCxRQUFBQSxJQUFJLEVBQUVNO0FBQVIsT0FBckI7QUFDRCxLQUhELENBR0UsT0FBT0ssS0FBUCxFQUFjO0FBQ2RaLE1BQUFBLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVDLFFBQUFBLE9BQU8sRUFBRUMsS0FBSyxDQUFDRDtBQUFqQixPQUFyQjtBQUNEO0FBQ0Y7O0FBQ2UsUUFBVlMsVUFBVSxDQUFDckIsR0FBRCxFQUFNQyxHQUFOLEVBQVc7QUFDekIsUUFBSTtBQUNGLFlBQU1PLElBQUksR0FBRyxNQUFNRCxjQUFZYyxVQUFaLENBQXVCckIsR0FBRyxDQUFDb0IsTUFBSixDQUFXZixFQUFsQyxFQUFzQ0wsR0FBRyxDQUFDRyxJQUExQyxDQUFuQjtBQUNBLGFBQU9GLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVULFFBQUFBLElBQUksRUFBRU07QUFBUixPQUFyQixDQUFQO0FBQ0QsS0FIRCxDQUdFLE9BQU9LLEtBQVAsRUFBYztBQUNkLGFBQU9aLEdBQUcsQ0FBQ1MsTUFBSixDQUFXLEdBQVgsRUFBZ0JDLElBQWhCLENBQXFCO0FBQUVDLFFBQUFBLE9BQU8sRUFBRUMsS0FBSyxDQUFDRDtBQUFqQixPQUFyQixDQUFQO0FBQ0Q7QUFDRjs7QUF2Q3FCOzs7O2VBeUNULElBQUlkLFVBQUosRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTaXRlU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9zaXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgZGVjb2RlVG9rZW4gfSBmcm9tICcuLi8uLi8uLi9oZWxwZXJzJztcbmV4cG9ydCBjbGFzcyBDb250cm9sbGVyIHtcbiAgYXN5bmMgY3JlYXRlU2l0ZShyZXEsIHJlcykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0gZGVjb2RlVG9rZW4ocmVxKTtcbiAgICAgIHJlcS5ib2R5LmNyZWF0b3IgPSBkYXRhLmlkO1xuICAgICAgY29uc3Qgc2l0ZU9iamVjdCA9IFNpdGVTZXJ2aWNlLnNpdGVPYmplY3QocmVxKTtcbiAgICAgIGNvbnN0IHNpdGUgPSBhd2FpdCBTaXRlU2VydmljZS5zYXZlU2l0ZShzaXRlT2JqZWN0KTtcbiAgICAgIHJlc1xuICAgICAgICAuc3RhdHVzKDIwMSlcbiAgICAgICAgLmpzb24oeyBtZXNzYWdlOiAnU2l0ZSBjcmVhdGVkIHN1Y2Nlc3NmdWxseScsIGRhdGE6IHNpdGUgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZ2V0U2l0ZXMocmVxLCByZXMpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YSA9IGRlY29kZVRva2VuKHJlcSk7XG4gICAgICBjb25zdCBzaXRlcyA9IGF3YWl0IFNpdGVTZXJ2aWNlLmdldEFsbFNpdGVzKGRhdGEuaWQpO1xuICAgICAgcmVzLnN0YXR1cygyMDEpLmpzb24oeyBkYXRhOiBzaXRlcyB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSk7XG4gICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UgfSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGdldFNpdGUocmVxLCByZXMpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2l0ZSA9IGF3YWl0IFNpdGVTZXJ2aWNlLmdldFNpdGUocmVxLnBhcmFtcy5pZCk7XG4gICAgICByZXMuc3RhdHVzKDIwMSkuanNvbih7IGRhdGE6IHNpdGUgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogZXJyb3IubWVzc2FnZSB9KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgdXBkYXRlU2l0ZShyZXEsIHJlcykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBzaXRlID0gYXdhaXQgU2l0ZVNlcnZpY2UudXBkYXRlU2l0ZShyZXEucGFyYW1zLmlkLCByZXEuYm9keSk7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oeyBkYXRhOiBzaXRlIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiBlcnJvci5tZXNzYWdlIH0pO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgbmV3IENvbnRyb2xsZXIoKTtcblxuIl19