"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _token = _interopRequireDefault(require("./token"));

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var _helpers = require("../../helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mongoose = require('mongoose');

const bcrypt = require('bcrypt');

var randomstring = require('randomstring');

var Schema = mongoose.Schema;
var UserSchema = new Schema({
  firstName: {
    type: String,
    required: true
  },
  lastName: {
    type: String,
    required: true
  },
  email: {
    type: String,
    unique: true,
    required: true
  },
  password: {
    type: String,
    required: true
  },
  avatar: {
    type: String,
    required: false
  },
  role: {
    type: String,
    required: true,
    enum: _helpers.Constants.roles
  },
  creator: {
    type: mongoose.Schema.Types.ObjectId,
    required: false,
    ref: 'User'
  },
  site: {
    type: mongoose.Schema.Types.ObjectId,
    required: false,
    ref: 'Site'
  },
  inviteStatus: {
    type: String,
    required: false,
    default: 'accepted'
  },
  isVerified: {
    type: Boolean,
    default: false
  },
  deleted: {
    type: Boolean,
    required: false,
    default: false
  }
}, {
  timestamps: true
});
UserSchema.pre('save', function (next) {
  const user = this;
  if (!user.isModified('password')) return next();
  bcrypt.genSalt(10, function (err, salt) {
    if (err) return next(err);
    bcrypt.hash(user.password, salt, function (err, hash) {
      if (err) return next(err);
      user.password = hash;
      next();
    });
  });
});

UserSchema.methods.comparePassword = function (password) {
  return bcrypt.compareSync(password, this.password);
};

UserSchema.methods.generateJWT = function () {
  const today = new Date();
  const expirationDate = new Date(today);
  expirationDate.setDate(today.getDate() + 60);
  let payload = {
    id: this._id,
    email: this.email,
    user: this.role
  };
  return _jsonwebtoken.default.sign(payload, process.env.SECRET, {
    expiresIn: parseInt(expirationDate.getTime() / 1000, 10)
  });
};

UserSchema.methods.generateVerificationToken = function () {
  let payload = {
    userId: this._id,
    token: randomstring.generate({
      length: 6,
      charset: 'numeric'
    })
  };
  return new _token.default(payload);
};

var _default = mongoose.model('User', UserSchema);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NlcnZlci9hcGkvbW9kZWxzL3VzZXIuanMiXSwibmFtZXMiOlsibW9uZ29vc2UiLCJyZXF1aXJlIiwiYmNyeXB0IiwicmFuZG9tc3RyaW5nIiwiU2NoZW1hIiwiVXNlclNjaGVtYSIsImZpcnN0TmFtZSIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsImxhc3ROYW1lIiwiZW1haWwiLCJ1bmlxdWUiLCJwYXNzd29yZCIsImF2YXRhciIsInJvbGUiLCJlbnVtIiwiQ29uc3RhbnRzIiwicm9sZXMiLCJjcmVhdG9yIiwiVHlwZXMiLCJPYmplY3RJZCIsInJlZiIsInNpdGUiLCJpbnZpdGVTdGF0dXMiLCJkZWZhdWx0IiwiaXNWZXJpZmllZCIsIkJvb2xlYW4iLCJkZWxldGVkIiwidGltZXN0YW1wcyIsInByZSIsIm5leHQiLCJ1c2VyIiwiaXNNb2RpZmllZCIsImdlblNhbHQiLCJlcnIiLCJzYWx0IiwiaGFzaCIsIm1ldGhvZHMiLCJjb21wYXJlUGFzc3dvcmQiLCJjb21wYXJlU3luYyIsImdlbmVyYXRlSldUIiwidG9kYXkiLCJEYXRlIiwiZXhwaXJhdGlvbkRhdGUiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsInBheWxvYWQiLCJpZCIsIl9pZCIsImp3dCIsInNpZ24iLCJwcm9jZXNzIiwiZW52IiwiU0VDUkVUIiwiZXhwaXJlc0luIiwicGFyc2VJbnQiLCJnZXRUaW1lIiwiZ2VuZXJhdGVWZXJpZmljYXRpb25Ub2tlbiIsInVzZXJJZCIsInRva2VuIiwiZ2VuZXJhdGUiLCJsZW5ndGgiLCJjaGFyc2V0IiwiVG9rZW4iLCJtb2RlbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUVBOztBQUNBOztBQUNBOzs7O0FBSkEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUlBLElBQUlFLFlBQVksR0FBR0YsT0FBTyxDQUFDLGNBQUQsQ0FBMUI7O0FB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QyxjQUFKLENBQVVqQixPQUFWLENBQVA7QUFDRCxDQVZEOztlQVllL0MsUUFBUSxDQUFDaUUsS0FBVCxDQUFlLE1BQWYsRUFBdUI1RCxVQUF2QixDIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcbmNvbnN0IGJjcnlwdCA9IHJlcXVpcmUoJ2JjcnlwdCcpO1xuaW1wb3J0IFRva2VuIGZyb20gJy4vdG9rZW4nO1xuaW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nO1xuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSAnLi4vLi4vaGVscGVycyc7XG52YXIgcmFuZG9tc3RyaW5nID0gcmVxdWlyZSgncmFuZG9tc3RyaW5nJyk7XG52YXIgU2NoZW1hID0gbW9uZ29vc2UuU2NoZW1hO1xuXG52YXIgVXNlclNjaGVtYSA9IG5ldyBTY2hlbWEoXG4gIHtcbiAgICBmaXJzdE5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0sXG4gICAgbGFzdE5hbWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0sXG4gICAgZW1haWw6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHVuaXF1ZTogdHJ1ZSxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0sXG4gICAgcGFzc3dvcmQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0sXG4gICAgYXZhdGFyOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgfSxcbiAgICByb2xlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIGVudW06IENvbnN0YW50cy5yb2xlcyxcbiAgICB9LFxuICAgIGNyZWF0b3I6IHtcbiAgICAgIHR5cGU6IG1vbmdvb3NlLlNjaGVtYS5UeXBlcy5PYmplY3RJZCxcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgIHJlZjogJ1VzZXInLFxuICAgIH0sXG4gICAgc2l0ZToge1xuICAgICAgdHlwZTogbW9uZ29vc2UuU2NoZW1hLlR5cGVzLk9iamVjdElkLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgcmVmOiAnU2l0ZScsXG4gICAgfSxcbiAgICBpbnZpdGVTdGF0dXM6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcbiAgICAgIGRlZmF1bHQ6ICdhY2NlcHRlZCcsXG4gICAgfSxcbiAgICBpc1ZlcmlmaWVkOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSxcbiAgICBkZWxldGVkOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgfSxcbiAgfSxcbiAge1xuICAgIHRpbWVzdGFtcHM6IHRydWUsXG4gIH1cbik7XG5cblVzZXJTY2hlbWEucHJlKCdzYXZlJywgZnVuY3Rpb24gKG5leHQpIHtcbiAgY29uc3QgdXNlciA9IHRoaXM7XG4gIGlmICghdXNlci5pc01vZGlmaWVkKCdwYXNzd29yZCcpKSByZXR1cm4gbmV4dCgpO1xuICBiY3J5cHQuZ2VuU2FsdCgxMCwgZnVuY3Rpb24gKGVyciwgc2FsdCkge1xuICAgIGlmIChlcnIpIHJldHVybiBuZXh0KGVycik7XG4gICAgYmNyeXB0Lmhhc2godXNlci5wYXNzd29yZCwgc2FsdCwgZnVuY3Rpb24gKGVyciwgaGFzaCkge1xuICAgICAgaWYgKGVycikgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgIHVzZXIucGFzc3dvcmQgPSBoYXNoO1xuICAgICAgbmV4dCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5Vc2VyU2NoZW1hLm1ldGhvZHMuY29tcGFyZVBhc3N3b3JkID0gZnVuY3Rpb24gKHBhc3N3b3JkKSB7XG4gIHJldHVybiBiY3J5cHQuY29tcGFyZVN5bmMocGFzc3dvcmQsIHRoaXMucGFzc3dvcmQpO1xufTtcblVzZXJTY2hlbWEubWV0aG9kcy5nZW5lcmF0ZUpXVCA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICBjb25zdCBleHBpcmF0aW9uRGF0ZSA9IG5ldyBEYXRlKHRvZGF5KTtcbiAgZXhwaXJhdGlvbkRhdGUuc2V0RGF0ZSh0b2RheS5nZXREYXRlKCkgKyA2MCk7XG4gIGxldCBwYXlsb2FkID0ge1xuICAgIGlkOiB0aGlzLl9pZCxcbiAgICBlbWFpbDogdGhpcy5lbWFpbCxcbiAgICB1c2VyOiB0aGlzLnJvbGUsXG4gIH07XG4gIHJldHVybiBqd3Quc2lnbihwYXlsb2FkLCBwcm9jZXNzLmVudi5TRUNSRVQsIHtcbiAgICBleHBpcmVzSW46IHBhcnNlSW50KGV4cGlyYXRpb25EYXRlLmdldFRpbWUoKSAvIDEwMDAsIDEwKSxcbiAgfSk7XG59O1xuVXNlclNjaGVtYS5tZXRob2RzLmdlbmVyYXRlVmVyaWZpY2F0aW9uVG9rZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGxldCBwYXlsb2FkID0ge1xuICAgIHVzZXJJZDogdGhpcy5faWQsXG4gICAgdG9rZW46IHJhbmRvbXN0cmluZy5nZW5lcmF0ZSh7XG4gICAgICBsZW5ndGg6IDYsXG4gICAgICBjaGFyc2V0OiAnbnVtZXJpYycsXG4gICAgfSksXG4gIH07XG5cbiAgcmV0dXJuIG5ldyBUb2tlbihwYXlsb2FkKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1vbmdvb3NlLm1vZGVsKCdVc2VyJywgVXNlclNjaGVtYSk7XG4iXX0=