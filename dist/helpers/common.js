"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verifyGoogleToken = exports.decodeInviteToken = exports.generateInviteLink = exports.generateJwt = exports.decodeToken = void 0;

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var _googleAuthLibrary = require("google-auth-library");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// const jwt = require('jsonwebtoken');
const client = new _googleAuthLibrary.OAuth2Client(process.env.GOOGLE_CLIENT_CLIENT_ID);

const decodeToken = req => {
  const authHeader = req.headers.authorization;

  if (!authHeader) {
    return null;
  }

  const token = authHeader.split(' ')[1];
  return _jsonwebtoken.default.verify(token, process.env.SECRET);
};

exports.decodeToken = decodeToken;

const generateJwt = (user, password = null) => {
  const today = new Date();
  const expirationDate = new Date(today);
  expirationDate.setDate(today.getDate() + 60);
  let payload = {
    id: user._id,
    email: user.email,
    role: user.role,
    password: password ? password : user.password
  };
  return _jsonwebtoken.default.sign(payload, process.env.SECRET, {
    expiresIn: parseInt(expirationDate.getTime() / 1000, 10)
  });
};

exports.generateJwt = generateJwt;

const generateInviteLink = token => {
  return `${process.env.APP_LINK}/landing/${token}`;
};

exports.generateInviteLink = generateInviteLink;

const decodeInviteToken = token => {
  return _jsonwebtoken.default.verify(token, process.env.SECRET);
};

exports.decodeInviteToken = decodeInviteToken;

const verifyGoogleToken = async token => {
  const ticket = await client.verifyIdToken({
    idToken: token,
    audience: process.env.GOOGLE_CLIENT_ID // Specify the CLIENT_ID of the app that accesses the backend

  });
  const payload = ticket.getPayload();
  return payload;
};

exports.verifyGoogleToken = verifyGoogleToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9oZWxwZXJzL2NvbW1vbi5qcyJdLCJuYW1lcyI6WyJjbGllbnQiLCJPQXV0aDJDbGllbnQiLCJwcm9jZXNzIiwiZW52IiwiR09PR0xFX0NMSUVOVF9DTElFTlRfSUQiLCJkZWNvZGVUb2tlbiIsInJlcSIsImF1dGhIZWFkZXIiLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsInRva2VuIiwic3BsaXQiLCJqd3QiLCJ2ZXJpZnkiLCJTRUNSRVQiLCJnZW5lcmF0ZUp3dCIsInVzZXIiLCJwYXNzd29yZCIsInRvZGF5IiwiRGF0ZSIsImV4cGlyYXRpb25EYXRlIiwic2V0RGF0ZSIsImdldERhdGUiLCJwYXlsb2FkIiwiaWQiLCJfaWQiLCJlbWFpbCIsInJvbGUiLCJzaWduIiwiZXhwaXJlc0luIiwicGFyc2VJbnQiLCJnZXRUaW1lIiwiZ2VuZXJhdGVJbnZpdGVMaW5rIiwiQVBQX0xJTksiLCJkZWNvZGVJbnZpdGVUb2tlbiIsInZlcmlmeUdvb2dsZVRva2VuIiwidGlja2V0IiwidmVyaWZ5SWRUb2tlbiIsImlkVG9rZW4iLCJhdWRpZW5jZSIsIkdPT0dMRV9DTElFTlRfSUQiLCJnZXRQYXlsb2FkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7O0FBQ0E7Ozs7QUFGQTtBQUdBLE1BQU1BLE1BQU0sR0FBRyxJQUFJQywrQkFBSixDQUFpQkMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLHVCQUE3QixDQUFmOztBQUVPLE1BQU1DLFdBQVcsR0FBSUMsR0FBRCxJQUFTO0FBQ2xDLFFBQU1DLFVBQVUsR0FBR0QsR0FBRyxDQUFDRSxPQUFKLENBQVlDLGFBQS9COztBQUNBLE1BQUksQ0FBQ0YsVUFBTCxFQUFpQjtBQUNmLFdBQU8sSUFBUDtBQUNEOztBQUNELFFBQU1HLEtBQUssR0FBR0gsVUFBVSxDQUFDSSxLQUFYLENBQWlCLEdBQWpCLEVBQXNCLENBQXRCLENBQWQ7QUFDQSxTQUFPQyxzQkFBSUMsTUFBSixDQUFXSCxLQUFYLEVBQWtCUixPQUFPLENBQUNDLEdBQVIsQ0FBWVcsTUFBOUIsQ0FBUDtBQUNELENBUE07Ozs7QUFTQSxNQUFNQyxXQUFXLEdBQUcsQ0FBQ0MsSUFBRCxFQUFPQyxRQUFRLEdBQUcsSUFBbEIsS0FBMkI7QUFDcEQsUUFBTUMsS0FBSyxHQUFHLElBQUlDLElBQUosRUFBZDtBQUNBLFFBQU1DLGNBQWMsR0FBRyxJQUFJRCxJQUFKLENBQVNELEtBQVQsQ0FBdkI7QUFDQUUsRUFBQUEsY0FBYyxDQUFDQyxPQUFmLENBQXVCSCxLQUFLLENBQUNJLE9BQU4sS0FBa0IsRUFBekM7QUFDQSxNQUFJQyxPQUFPLEdBQUc7QUFDWkMsSUFBQUEsRUFBRSxFQUFFUixJQUFJLENBQUNTLEdBREc7QUFFWkMsSUFBQUEsS0FBSyxFQUFFVixJQUFJLENBQUNVLEtBRkE7QUFHWkMsSUFBQUEsSUFBSSxFQUFFWCxJQUFJLENBQUNXLElBSEM7QUFJWlYsSUFBQUEsUUFBUSxFQUFFQSxRQUFRLEdBQUdBLFFBQUgsR0FBY0QsSUFBSSxDQUFDQztBQUp6QixHQUFkO0FBTUEsU0FBT0wsc0JBQUlnQixJQUFKLENBQVNMLE9BQVQsRUFBa0JyQixPQUFPLENBQUNDLEdBQVIsQ0FBWVcsTUFBOUIsRUFBc0M7QUFDM0NlLElBQUFBLFNBQVMsRUFBRUMsUUFBUSxDQUFDVixjQUFjLENBQUNXLE9BQWYsS0FBMkIsSUFBNUIsRUFBa0MsRUFBbEM7QUFEd0IsR0FBdEMsQ0FBUDtBQUdELENBYk07Ozs7QUFlQSxNQUFNQyxrQkFBa0IsR0FBSXRCLEtBQUQsSUFBVztBQUMzQyxTQUFRLEdBQUVSLE9BQU8sQ0FBQ0MsR0FBUixDQUFZOEIsUUFBUyxZQUFXdkIsS0FBTSxFQUFoRDtBQUNELENBRk07Ozs7QUFJQSxNQUFNd0IsaUJBQWlCLEdBQUl4QixLQUFELElBQVc7QUFDMUMsU0FBT0Usc0JBQUlDLE1BQUosQ0FBV0gsS0FBWCxFQUFrQlIsT0FBTyxDQUFDQyxHQUFSLENBQVlXLE1BQTlCLENBQVA7QUFDRCxDQUZNOzs7O0FBSUEsTUFBTXFCLGlCQUFpQixHQUFHLE1BQU96QixLQUFQLElBQWlCO0FBQ2hELFFBQU0wQixNQUFNLEdBQUcsTUFBTXBDLE1BQU0sQ0FBQ3FDLGFBQVAsQ0FBcUI7QUFDeENDLElBQUFBLE9BQU8sRUFBRTVCLEtBRCtCO0FBRXhDNkIsSUFBQUEsUUFBUSxFQUFFckMsT0FBTyxDQUFDQyxHQUFSLENBQVlxQyxnQkFGa0IsQ0FFQTs7QUFGQSxHQUFyQixDQUFyQjtBQUlBLFFBQU1qQixPQUFPLEdBQUdhLE1BQU0sQ0FBQ0ssVUFBUCxFQUFoQjtBQUNBLFNBQU9sQixPQUFQO0FBQ0QsQ0FQTSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGNvbnN0IGp3dCA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpO1xuaW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nO1xuaW1wb3J0IHsgT0F1dGgyQ2xpZW50IH0gZnJvbSAnZ29vZ2xlLWF1dGgtbGlicmFyeSc7XG5jb25zdCBjbGllbnQgPSBuZXcgT0F1dGgyQ2xpZW50KHByb2Nlc3MuZW52LkdPT0dMRV9DTElFTlRfQ0xJRU5UX0lEKTtcblxuZXhwb3J0IGNvbnN0IGRlY29kZVRva2VuID0gKHJlcSkgPT4ge1xuICBjb25zdCBhdXRoSGVhZGVyID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbjtcbiAgaWYgKCFhdXRoSGVhZGVyKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgdG9rZW4gPSBhdXRoSGVhZGVyLnNwbGl0KCcgJylbMV07XG4gIHJldHVybiBqd3QudmVyaWZ5KHRva2VuLCBwcm9jZXNzLmVudi5TRUNSRVQpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlSnd0ID0gKHVzZXIsIHBhc3N3b3JkID0gbnVsbCkgPT4ge1xuICBjb25zdCB0b2RheSA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IGV4cGlyYXRpb25EYXRlID0gbmV3IERhdGUodG9kYXkpO1xuICBleHBpcmF0aW9uRGF0ZS5zZXREYXRlKHRvZGF5LmdldERhdGUoKSArIDYwKTtcbiAgbGV0IHBheWxvYWQgPSB7XG4gICAgaWQ6IHVzZXIuX2lkLFxuICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgIHJvbGU6IHVzZXIucm9sZSxcbiAgICBwYXNzd29yZDogcGFzc3dvcmQgPyBwYXNzd29yZCA6IHVzZXIucGFzc3dvcmQsXG4gIH07XG4gIHJldHVybiBqd3Quc2lnbihwYXlsb2FkLCBwcm9jZXNzLmVudi5TRUNSRVQsIHtcbiAgICBleHBpcmVzSW46IHBhcnNlSW50KGV4cGlyYXRpb25EYXRlLmdldFRpbWUoKSAvIDEwMDAsIDEwKSxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVJbnZpdGVMaW5rID0gKHRva2VuKSA9PiB7XG4gIHJldHVybiBgJHtwcm9jZXNzLmVudi5BUFBfTElOS30vbGFuZGluZy8ke3Rva2VufWA7XG59O1xuXG5leHBvcnQgY29uc3QgZGVjb2RlSW52aXRlVG9rZW4gPSAodG9rZW4pID0+IHtcbiAgcmV0dXJuIGp3dC52ZXJpZnkodG9rZW4sIHByb2Nlc3MuZW52LlNFQ1JFVCk7XG59O1xuXG5leHBvcnQgY29uc3QgdmVyaWZ5R29vZ2xlVG9rZW4gPSBhc3luYyAodG9rZW4pID0+IHtcbiAgY29uc3QgdGlja2V0ID0gYXdhaXQgY2xpZW50LnZlcmlmeUlkVG9rZW4oe1xuICAgIGlkVG9rZW46IHRva2VuLFxuICAgIGF1ZGllbmNlOiBwcm9jZXNzLmVudi5HT09HTEVfQ0xJRU5UX0lELCAvLyBTcGVjaWZ5IHRoZSBDTElFTlRfSUQgb2YgdGhlIGFwcCB0aGF0IGFjY2Vzc2VzIHRoZSBiYWNrZW5kXG4gIH0pO1xuICBjb25zdCBwYXlsb2FkID0gdGlja2V0LmdldFBheWxvYWQoKTtcbiAgcmV0dXJuIHBheWxvYWQ7XG59O1xuIl19